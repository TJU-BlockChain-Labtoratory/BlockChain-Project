syntax = "proto3";
import "aelf/core.proto";
import "aelf/options.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.CRContract";

service CRContract {

    option (aelf.csharp_state) = "AElf.Contracts.CRContract.CRContractState";

    rpc CR_Register (aelf.Address) returns (aelf.SInt64Value) { }//用户注册

    rpc CR_Login(aelf.Address) returns (aelf.SInt64Value) { }//用户登录

    rpc CR_Upload (UploadData) returns (aelf.SInt64Value) { }//上传版权

    rpc CR_Transfer (TransferData) returns (aelf.SInt64Value) { }//交易版权

    rpc CR_Pledge ( PledgeData ) returns (aelf.SInt64Value) {}//版权质押

    rpc CR_UnPledge ( aelf.Hash ) returns (aelf.SInt64Value) {} //版权赎回
    
    rpc CR_Authorize ( AuthorizeData ) returns (aelf.SInt64Value) {} //版权授权

    rpc CR_Approve ( ApproveReqInput ) returns (aelf.SInt64Value) {}//版权质押

    rpc CR_UnApprove ( ApproveReqInput ) returns (aelf.SInt64Value) {} //版权赎回

    rpc CR_Logout(aelf.Address) returns (aelf.SInt64Value){ }//用户登出

    rpc CR_Delete(aelf.Address) returns (aelf.SInt64Value){ }//用户注销

    rpc Timecheck ( google.protobuf.Empty ) returns (aelf.SInt64Value) {}//检查被质押CRT的时限

    rpc isApproved (ApproveReqInput) returns (google.protobuf.BoolValue) {//查看是否被授予操作权限
        option (aelf.is_view) = true;
    }

    rpc isAuthorized (AuthorizeInput) returns (google.protobuf.BoolValue) {//查看是否被授权
        option (aelf.is_view) = true;
    }

    rpc getAllInfo (aelf.Hash) returns (CRT_Info) {//查看存储信息
        option (aelf.is_view) = true;
    }

    rpc getPledgeInfo (aelf.Hash) returns (CRT_Pledge_Info) {//查看存储信息
        option (aelf.is_view) = true;
    }
    
    rpc getAllCRTs (aelf.Address) returns (CRT_List) {//查看存储信息
        option (aelf.is_view) = true;
    }
    
    rpc Get_User_Info(aelf.Address) returns (Identity){
        option (aelf.is_view) = true;
    }
}

// a custom message, used as the return type of the Hello action
message Identity {//身份信息数据结构
    aelf.Address Address = 1;//地址
    bool online = 2;
    //后续继续添加
}

message UploadData{
    aelf.Address CRT_Creator = 1;
    aelf.Address CRT_Owner = 2;
    string CRT_Content = 3;
    sint64 CRT_Status = 4;
}

message TransferData{
    aelf.Address addr = 1;
    aelf.Hash CRT_ID = 2;
    sint64 price = 3;
}

message CRT_Pledge_Info{
    aelf.Hash CRT_ID = 1;
    aelf.Address pledgee = 2; //质权人
    aelf.Address pledger = 3; //出质人
    sint64 price = 4;//质押价格
    aelf.Hash txID = 5; //质押交易ID
    string notice = 6;//备注
    google.protobuf.Timestamp time_limit = 7;//质押结束时间，质押结束时间到，如果还没有赎回，则将版权的拥有权从出质人转变为质权人
}

message PledgeData{
    aelf.Hash CRT_ID = 1;
    aelf.Address pledgee = 2; //质权人
    aelf.Address pledger = 3; //出质人
    sint64 price = 4;//质押价格
    string notice = 5;//备注
    google.protobuf.Timestamp time_limit = 6;//质押结束时间，质押结束时间到，如果还没有赎回，则将版权的拥有权从出质人转变为质权人
}

message CRT_Authorize_Info{
    aelf.Address authorized = 1;
    sint64 price = 2;
    aelf.Hash txID = 3;
    string notice = 4;
}

message AuthorizeData{
    aelf.Hash CRT_ID = 1;
    CRT_Authorize_Info Authorize_Info= 2;
}

message CRT_Info {//版权资产证明
    aelf.Hash CRT_ID = 1;//只读，唯一标识，被用于标识对应版权。
    aelf.Address CRT_Creator = 2;//只读，地址，标识此Token所对应作品的创造者。
    aelf.Address CRT_Owner = 3;//地址，标识此Token财产权的所有者。
    string CRT_Content = 4;//只读，地址，指向该token对应作品数据所存储的链接位置。
    sint64 CRT_Status = 5;//状态属性，暂时包括正常（0）、被质押（1）和被销毁(2)。
}

message CRT {//版权资产证明
    CRT_Info info = 1;//数据结构（下文所描述的），代表着CRT的基本信息
    repeated aelf.Address CRT_Authorized = 2;//地址数组，标识被授权使用该Token的全部用户（被许可人）。
    repeated aelf.Address CRT_Approved = 3;//地址数组，记录所有有权修改该CRT属性（除去只读属性）的用户（合约本身也需要Approve后才能操作属性）
    CRT_Pledge_Info Pledge_Info = 4;//地址，仅在CR_Status为被质押时有效。存储版权被质押信息的交易ID。
    repeated CRT_Authorize_Info Authorize_Info = 5;
}

message CRT_List{
    repeated aelf.Hash CRT_Set = 1;
}

message AuthorizeInput{
    aelf.Hash CRT_ID = 1;
    aelf.Address addr = 2;
}

message ApproveReqInput{
    aelf.Hash CRT_ID = 1;
    aelf.Address addr = 2;
}